// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Add extends ethereum.Event {
  get params(): Add__Params {
    return new Add__Params(this);
  }
}

export class Add__Params {
  _event: Add;

  constructor(event: Add) {
    this._event = event;
  }

  get num1(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Divide extends ethereum.Event {
  get params(): Divide__Params {
    return new Divide__Params(this);
  }
}

export class Divide__Params {
  _event: Divide;

  constructor(event: Divide) {
    this._event = event;
  }

  get num1(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Multiplication extends ethereum.Event {
  get params(): Multiplication__Params {
    return new Multiplication__Params(this);
  }
}

export class Multiplication__Params {
  _event: Multiplication;

  constructor(event: Multiplication) {
    this._event = event;
  }

  get num1(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Substraction extends ethereum.Event {
  get params(): Substraction__Params {
    return new Substraction__Params(this);
  }
}

export class Substraction__Params {
  _event: Substraction;

  constructor(event: Substraction) {
    this._event = event;
  }

  get num1(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Calculator extends ethereum.SmartContract {
  static bind(address: Address): Calculator {
    return new Calculator("Calculator", address);
  }

  add(num1: BigInt, num2: BigInt): BigInt {
    let result = super.call("add", "add(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(num1),
      ethereum.Value.fromUnsignedBigInt(num2)
    ]);

    return result[0].toBigInt();
  }

  try_add(num1: BigInt, num2: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("add", "add(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(num1),
      ethereum.Value.fromUnsignedBigInt(num2)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  divide(num1: BigInt, num2: BigInt): BigInt {
    let result = super.call("divide", "divide(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(num1),
      ethereum.Value.fromUnsignedBigInt(num2)
    ]);

    return result[0].toBigInt();
  }

  try_divide(num1: BigInt, num2: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("divide", "divide(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(num1),
      ethereum.Value.fromUnsignedBigInt(num2)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multiplication(num1: BigInt, num2: BigInt): BigInt {
    let result = super.call(
      "multiplication",
      "multiplication(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );

    return result[0].toBigInt();
  }

  try_multiplication(num1: BigInt, num2: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "multiplication",
      "multiplication(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resultAdd(): BigInt {
    let result = super.call("resultAdd", "resultAdd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_resultAdd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("resultAdd", "resultAdd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resultDivision(): BigInt {
    let result = super.call("resultDivision", "resultDivision():(uint256)", []);

    return result[0].toBigInt();
  }

  try_resultDivision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resultDivision",
      "resultDivision():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resultMultiplication(): BigInt {
    let result = super.call(
      "resultMultiplication",
      "resultMultiplication():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_resultMultiplication(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resultMultiplication",
      "resultMultiplication():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resultSubstraction(): BigInt {
    let result = super.call(
      "resultSubstraction",
      "resultSubstraction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_resultSubstraction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resultSubstraction",
      "resultSubstraction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  substraction(num1: BigInt, num2: BigInt): BigInt {
    let result = super.call(
      "substraction",
      "substraction(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );

    return result[0].toBigInt();
  }

  try_substraction(num1: BigInt, num2: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "substraction",
      "substraction(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get num1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DivideCall extends ethereum.Call {
  get inputs(): DivideCall__Inputs {
    return new DivideCall__Inputs(this);
  }

  get outputs(): DivideCall__Outputs {
    return new DivideCall__Outputs(this);
  }
}

export class DivideCall__Inputs {
  _call: DivideCall;

  constructor(call: DivideCall) {
    this._call = call;
  }

  get num1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DivideCall__Outputs {
  _call: DivideCall;

  constructor(call: DivideCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MultiplicationCall extends ethereum.Call {
  get inputs(): MultiplicationCall__Inputs {
    return new MultiplicationCall__Inputs(this);
  }

  get outputs(): MultiplicationCall__Outputs {
    return new MultiplicationCall__Outputs(this);
  }
}

export class MultiplicationCall__Inputs {
  _call: MultiplicationCall;

  constructor(call: MultiplicationCall) {
    this._call = call;
  }

  get num1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MultiplicationCall__Outputs {
  _call: MultiplicationCall;

  constructor(call: MultiplicationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubstractionCall extends ethereum.Call {
  get inputs(): SubstractionCall__Inputs {
    return new SubstractionCall__Inputs(this);
  }

  get outputs(): SubstractionCall__Outputs {
    return new SubstractionCall__Outputs(this);
  }
}

export class SubstractionCall__Inputs {
  _call: SubstractionCall;

  constructor(call: SubstractionCall) {
    this._call = call;
  }

  get num1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubstractionCall__Outputs {
  _call: SubstractionCall;

  constructor(call: SubstractionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
