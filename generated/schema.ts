// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Add extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Add entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Add entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Add", id.toString(), this);
  }

  static load(id: string): Add | null {
    return store.get("Add", id) as Add | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get num1(): BigInt {
    let value = this.get("num1");
    return value.toBigInt();
  }

  set num1(value: BigInt) {
    this.set("num1", Value.fromBigInt(value));
  }

  get num2(): BigInt {
    let value = this.get("num2");
    return value.toBigInt();
  }

  set num2(value: BigInt) {
    this.set("num2", Value.fromBigInt(value));
  }

  get result(): BigInt {
    let value = this.get("result");
    return value.toBigInt();
  }

  set result(value: BigInt) {
    this.set("result", Value.fromBigInt(value));
  }
}

export class Divide extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Divide entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Divide entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Divide", id.toString(), this);
  }

  static load(id: string): Divide | null {
    return store.get("Divide", id) as Divide | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get num1(): BigInt {
    let value = this.get("num1");
    return value.toBigInt();
  }

  set num1(value: BigInt) {
    this.set("num1", Value.fromBigInt(value));
  }

  get num2(): BigInt {
    let value = this.get("num2");
    return value.toBigInt();
  }

  set num2(value: BigInt) {
    this.set("num2", Value.fromBigInt(value));
  }

  get result(): BigInt {
    let value = this.get("result");
    return value.toBigInt();
  }

  set result(value: BigInt) {
    this.set("result", Value.fromBigInt(value));
  }
}

export class Multiplication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Multiplication entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Multiplication entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Multiplication", id.toString(), this);
  }

  static load(id: string): Multiplication | null {
    return store.get("Multiplication", id) as Multiplication | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get num1(): BigInt {
    let value = this.get("num1");
    return value.toBigInt();
  }

  set num1(value: BigInt) {
    this.set("num1", Value.fromBigInt(value));
  }

  get num2(): BigInt {
    let value = this.get("num2");
    return value.toBigInt();
  }

  set num2(value: BigInt) {
    this.set("num2", Value.fromBigInt(value));
  }

  get result(): BigInt {
    let value = this.get("result");
    return value.toBigInt();
  }

  set result(value: BigInt) {
    this.set("result", Value.fromBigInt(value));
  }
}

export class Substraction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Substraction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Substraction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Substraction", id.toString(), this);
  }

  static load(id: string): Substraction | null {
    return store.get("Substraction", id) as Substraction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get num1(): BigInt {
    let value = this.get("num1");
    return value.toBigInt();
  }

  set num1(value: BigInt) {
    this.set("num1", Value.fromBigInt(value));
  }

  get num2(): BigInt {
    let value = this.get("num2");
    return value.toBigInt();
  }

  set num2(value: BigInt) {
    this.set("num2", Value.fromBigInt(value));
  }

  get result(): BigInt {
    let value = this.get("result");
    return value.toBigInt();
  }

  set result(value: BigInt) {
    this.set("result", Value.fromBigInt(value));
  }
}
